{"version":3,"sources":["logo.svg","_aqua/character_count.ts","App.tsx","index.tsx"],"names":["countChars","client","messageToSend","targetPeerId","targetRelayPeerId","config","a","promise","Promise","resolve","reject","r","RequestFlowBuilder","disableInjections","withRawScript","configHandler","h","on","relayPeerId","onEvent","args","res","err","handleScriptError","handleTimeout","ttl","withTTL","request","build","initiateFlow","relayNodes","krasnodar","copyToClipboard","text","navigator","clipboard","writeText","App","useState","setClient","setMessageToSend","message","setMessage","peerIdInput","setPeerIdInput","relayPeerIdInput","setRelayPeerIdInput","messageBtnOnClick","isConnected","className","src","logo","alt","selfPeerId","onClick","type","onChange","e","target","value","placeholder","map","x","peerId","multiaddr","createClient","then","callServiceHandler","msg","catch","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.167e6fa4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.7959c40c.svg\";","/**\n *\n * This file is auto-generated. Do not edit manually: changes may be erased.\n * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/. \n * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues\n * Aqua version: 0.2.2-221\n *\n */\nimport { FluenceClient, PeerIdB58 } from '@fluencelabs/fluence';\nimport { RequestFlowBuilder } from '@fluencelabs/fluence/dist/api.unstable';\nimport { RequestFlow } from '@fluencelabs/fluence/dist/internal/RequestFlow';\n\n\n// Services\n\n//CharCount\n//defaultId = undefined\n\n//char_count: (from: string) => {msg:string;reply:string}\n//END CharCount\n\n\n\n\n//CharCountPeer\n//defaultId = \"CharCountPeer\"\n\n//char_count: (message: string) => string\n//END CharCountPeer\n\n\n\n// Functions\n\nexport async function countChars(client: FluenceClient, messageToSend: string, targetPeerId: string, targetRelayPeerId: string, config?: {ttl?: number}): Promise<string> {\n    let request: RequestFlow;\n    const promise = new Promise<string>((resolve, reject) => {\n        const r = new RequestFlowBuilder()\n            .disableInjections()\n            .withRawScript(\n                `\n(xor\n (seq\n  (seq\n   (seq\n    (seq\n     (seq\n      (seq\n       (seq\n        (seq\n         (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n         (call %init_peer_id% (\"getDataSrv\" \"messageToSend\") [] messageToSend)\n        )\n        (call %init_peer_id% (\"getDataSrv\" \"targetPeerId\") [] targetPeerId)\n       )\n       (call %init_peer_id% (\"getDataSrv\" \"targetRelayPeerId\") [] targetRelayPeerId)\n      )\n      (call -relay- (\"op\" \"noop\") [])\n     )\n     (xor\n      (seq\n       (call -relay- (\"op\" \"noop\") [])\n       (call \"12D3KooWSD5PToNiLQwKDXsu8JSysCwUt8BVUJEqCHcDe7P5h45e\" (\"32e7f3e6-9f1e-4140-8281-c58bc4e59440\" \"char_count\") [messageToSend] comp)\n      )\n      (seq\n       (call -relay- (\"op\" \"noop\") [])\n       (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n      )\n     )\n    )\n    (call -relay- (\"op\" \"noop\") [])\n   )\n   (par\n    (seq\n     (call targetRelayPeerId (\"op\" \"noop\") [])\n     (xor\n      (call targetPeerId (\"CharCountPeer\" \"char_count\") [messageToSend] res)\n      (seq\n       (seq\n        (call targetRelayPeerId (\"op\" \"noop\") [])\n        (call -relay- (\"op\" \"noop\") [])\n       )\n       (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n      )\n     )\n    )\n    (null)\n   )\n  )\n  (xor\n   (call %init_peer_id% (\"callbackSrv\" \"response\") [comp.$.reply!])\n   (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 3])\n  )\n )\n (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 4])\n)\n\n            `,\n            )\n            .configHandler((h) => {\n                h.on('getDataSrv', '-relay-', () => {\n                    return client.relayPeerId!;\n                });\n                h.on('getDataSrv', 'messageToSend', () => {return messageToSend;});\nh.on('getDataSrv', 'targetPeerId', () => {return targetPeerId;});\nh.on('getDataSrv', 'targetRelayPeerId', () => {return targetRelayPeerId;});\n                h.onEvent('callbackSrv', 'response', (args) => {\n    const [res] = args;\n  resolve(res);\n});\n\n                h.onEvent('errorHandlingSrv', 'error', (args) => {\n                    // assuming error is the single argument\n                    const [err] = args;\n                    reject(err);\n                });\n            })\n            .handleScriptError(reject)\n            .handleTimeout(() => {\n                reject('Request timed out for countChars');\n            })\n        if(config && config.ttl) {\n            r.withTTL(config.ttl)\n        }\n        request = r.build();\n    });\n    await client.initiateFlow(request!);\n    return promise;\n}\n      \n","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.scss\";\n\nimport { createClient, FluenceClient } from \"@fluencelabs/fluence\";\nimport { krasnodar } from \"@fluencelabs/fluence-network-environment\";\nimport { countChars } from \"./_aqua/character_count\";\n\nconst relayNodes = [krasnodar[0], krasnodar[1], krasnodar[2]];\n\nfunction App() {\n  const [client, setClient] = useState<FluenceClient | null>(null);\n  const [messageToSend, setMessageToSend] = useState<string>(\"\");\n  const [message, setMessage] = useState<string | null>(null);\n\n  const [peerIdInput, setPeerIdInput] = useState<string>(\"\");\n  const [relayPeerIdInput, setRelayPeerIdInput] = useState<string>(\"\");\n\n  const connect = (relayPeerId: string) => {\n    createClient(relayPeerId)\n      .then((client) => {\n        // Register handler for this call in aqua:\n        client.callServiceHandler.onEvent(\"CharCountPeer\", \"char_count\", (args) => {\n          // no computation is done inside the browser\n          const [msg] = args;\n          setMessage(msg);\n        });\n        setClient(client);\n      })\n      .catch((err) => console.log(\"Client initialization failed\", err));\n  };\n\n  const messageBtnOnClick = async () => {\n    if (client === null) {\n      return;\n    }\n    // Using aqua is as easy as calling a javascript fun—Åtion\n    const res = await countChars(client!, messageToSend, peerIdInput, relayPeerIdInput);\n    setMessage(res);\n  };\n\n  const isConnected = client !== null;\n\n  return (\n    <div className=\"App\">\n      <header>\n        <img src={logo} className=\"logo\" alt=\"logo\" />\n      </header>\n\n      <div className=\"content\">\n        {isConnected ? (\n          <>\n            <h1>Connected</h1>\n            <table>\n              <tbody>\n                <tr>\n                  <td className=\"bold\">Peer id:</td>\n                  <td className=\"mono\">{client!.selfPeerId}</td>\n                  <td>\n                    <button\n                      className=\"btn-clipboard\"\n                      onClick={() => copyToClipboard(client!.selfPeerId)}\n                    >\n                      <i className=\"gg-clipboard\"></i>\n                    </button>\n                  </td>\n                </tr>\n                <tr>\n                  <td className=\"bold\">Relay peer id:</td>\n                  <td className=\"mono\">{client!.relayPeerId}</td>\n                  <td>\n                    <button\n                      className=\"btn-clipboard\"\n                      onClick={() => copyToClipboard(client!.relayPeerId!)}\n                    >\n                      <i className=\"gg-clipboard\"></i>\n                    </button>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n\n            <div>\n              <h2>Intro 4: Send message and count character</h2>\n              <p className=\"p\">\n                Now try opening a new tab with the same application. Copy paste\n                the peer id and relay from the second tab and send your message!\n              </p>\n              <div className=\"row\">\n                <label className=\"label bold\">Target peer id</label>\n                <input\n                  className=\"input\"\n                  type=\"text\"\n                  onChange={(e) => setPeerIdInput(e.target.value)}\n                  value={peerIdInput}\n                />\n              </div>\n              <div className=\"row\">\n                <label className=\"label bold\">Target relay</label>\n                <input\n                  className=\"input\"\n                  type=\"text\"\n                  onChange={(e) => setRelayPeerIdInput(e.target.value)}\n                  value={relayPeerIdInput}\n                />\n              </div>\n              <div className=\"row\">\n                <label className=\"label bold\">Text message</label>\n                <input\n                  className=\"input\"\n                  type=\"text\"\n                  placeholder=\"Type your message...\"\n                  onChange={(e) => setMessageToSend(e.target.value)}\n                  value={messageToSend}\n                />\n              </div>\n              <button className=\"btn btn-hello\" onClick={messageBtnOnClick}>\n                  Send hello message\n                </button>\n            </div>\n          </>\n        ) : (\n          <>\n            <h1>Intro 3: Computing on the network</h1>\n            <h2>Pick a relay</h2>\n            <ul>\n              {relayNodes.map((x) => (\n                <li key={x.peerId}>\n                  <span className=\"mono\">{x.peerId}</span>\n                  <button className=\"btn\" onClick={() => connect(x.multiaddr)}>\n                    Connect\n                  </button>\n                </li>\n              ))}\n            </ul>\n          </>\n        )}\n\n        {message && (\n          <>\n            <h2>Message</h2>\n            <div> {message} </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nconst copyToClipboard = (text: string) => {\n  navigator.clipboard.writeText(text);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}