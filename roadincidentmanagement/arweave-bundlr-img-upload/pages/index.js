import Head from 'next/head'
import { useState, useContext } from 'react'
import { MainContext } from '../context'
import BigNumber from 'bignumber.js'
import Image from 'next/image';
import { ethers } from 'ethers';

export default function Home() {
  const [selectedFile, setSelectedFile] = useState();
  const [img, setImg] = useState();
  const [URI, setURI] = useState();
  const [amount, setAmount] = useState();

  const {
    initialize, getBalance, balance, bundlrInst
  } = useContext(MainContext);

  const uploadImage = async () => {
    let txn = await bundlrInst.uploader.upload(selectedFile, [{ name: "Content-Type", value: "image/png" }]);
    setURI(`http://arweave.net/${txn.data.id}`);
    getBalance();
  }

  const imageLoader = ({src}) => {
    return URI
  } 

  const handleFileChange = (e) => {
    const reader = new FileReader();
    const file = e.target.files[0];
    if (file) {
      reader.onloadend = () => {
        if (reader.result) {
          setSelectedFile(Buffer.from(reader.result));
        }
      };
      reader.readAsArrayBuffer(file);
      const objectUrl = URL.createObjectURL(file);
      setImg(objectUrl);
    }
  }

  const fundWallet = async () => {
    if (!amount) return;
    const parseAmount = ethers.utils.parseEther(amount);
    let response = await bundlrInst.fund(parseAmount.toString());
    console.log('wallet funded: ', response);
    getBalance();
  }

  const parseInput = (input) => {
    const conversion = new BigNumber(ethers.utils.parseEther(input)).multipliedBy(bundlrInst.currencyConfig.base[1]);
    if (conversion.isLessThan(1)) {
      console.log('error: value too small');
      return;
    } else {
      return conversion;
    }
  }

  return (
    <div>
      <Head>
        <title>Arweave/Bundlr</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <meta httpEquiv="Content-Security-Policy" content="upgrade-insecure-requests" />
      </Head>

      <main>
        {!balance && <button onClick={initialize}>Initialize</button>}
        {balance && (
          <>
            <p>balance: {balance}</p>
            <input placeholder='add funds'
              onChange={(e) => setAmount(e.target.value)} />
            <button onClick={fundWallet}>fund</button>
          </>
        )
        }
        <div style={{ paddingTop: '10em' }}>
          <input
            type='file'
            onChange={handleFileChange}
          />
          <button style={button} onClick={uploadImage}>
            Upload Image
            </button>
        </div>
        {img &&
          <div style={previewFlex}>
            <div style={{ margin: '0 auto' }}>
              <h3>Our Image</h3>
              {img && (
                <div>
                  <Image src={img} width={500} height={500} style={previewStyle} alt='Image being uploaded' />
                </div>
              )
              }
            </div>
            <div style={{ margin: '0 auto' }}>
              <h3>Arweave Image</h3>
              {URI && (
                <>
                  <Image loader={imageLoader} src={URI} width={500} height={500} style={previewStyle} alt='Uploaded image' />
                  <a href={URI} target="_blank" rel="noopener noreferrer">{URI}</a>
                </>
              )
              }
            </div>
          </div>}
      </main>
    </div>
  )
}
const previewStyle = {
  maxWidth: '500px',
  height: 'auto',
  margin: '0 auto'
}

const previewFlex = {
  display: 'flex',
}

const button = {
  outline: 'none',
  border: '1px solid black',
  backgroundColor: 'white',
  padding: '10px',
  width: '200px',
  marginBottom: 10,
  cursor: 'pointer',
}